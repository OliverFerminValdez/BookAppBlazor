@page "/book/new"
@page "/book/edit/{Id:int}"
@using BookAppBlazor.Shared
@inject HttpClient http
@inject NavigationManager nav
@inject IToastService toast

<h3>@action Book</h3>
<hr />
@if (book == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="book" OnValidSubmit="SaveBook">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header text-center">
                <h3>Information</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="form-group">
                        <label>Title</label>
                        <InputText class="form-control" @bind-Value=book.Title></InputText>
                        <ValidationMessage For="@(() => book.Title)"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Author</label>
                        <InputText class="form-control" @bind-Value=book.Author></InputText>
                        <ValidationMessage For="@(() => book.Author)"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Editorial</label>
                        <InputText class="form-control" @bind-Value=book.Editorial></InputText>
                        <ValidationMessage For="@(() => book.Editorial)"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Publish Date</label>
                        <InputDate class="form-control" @bind-Value=book.PublishDate></InputDate>
                        <ValidationMessage For="@(() => book.PublishDate)"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Price</label>
                        <InputNumber class="form-control" @bind-Value=book.Price></InputNumber>
                        <ValidationMessage For="@(() => book.Price)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button class="btn btn-danger" @onclick=Cancel>Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>
}



@code {
    [Parameter]
    public int Id { get; set; }
    protected string action { get; set; } = "Add";
    protected Book book = new Book();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            action = "Edit";
            book = await http.GetFromJsonAsync<Book>("api/book/" + Id.ToString());
        }
    }

    protected async Task SaveBook()
    {
        if (book.IdBook != 0)
        {
            await http.PutAsJsonAsync("api/book/" + book.IdBook, book);
            toast.ShowSuccess("Modify Succesfully");
        }
        else
        {
            await http.PostAsJsonAsync("api/book", book);
            toast.ShowSuccess("Created Succesfuly");
        }
        Cancel();
    }

    public void Cancel()
    {
        nav.NavigateTo("/");
    }
}
